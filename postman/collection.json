{
	"info": {
		"_postman_id": "d9df03ae-a99f-4099-95e3-ec4be226ff3e",
		"name": "API Testing Coverage (Petstore)",
		"description": "### **API Testing Coverage (Petstore)**\n\n**SUT (System Under Test):**  \n[Swagger Petstore API Documentation](https://petstore.swagger.io/#/)\n\n**Descripción:**  \nEsta colección cubre pruebas de **backend** para la API de Petstore, enfocándose en la validación de respuestas, comportamiento de endpoints, y manejo de errores.\n\n**Objetivos de las Pruebas:**\n\n- Verificar el correcto funcionamiento de los endpoints de la API.\n    \n- Validar escenarios positivos, negativos y de borde para garantizar la integridad y consistencia del backend.\n    \n- Asegurar que las respuestas de la API cumplen con los requisitos técnicos y contractuales definidos en la documentación de Swagger.\n    \n\n**Estructura de la Colección:**\n\n- Las carpetas están organizadas por User Stories (US) para mantener la trazabilidad directa con los requisitos.\n    \n- Cada solicitud incluye precondiciones, datos de entrada y scripts de validación automatizados en Postman para asegurar la calidad de las pruebas.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40948063"
	},
	"item": [
		{
			"name": "US-001 PET | Everything about your Pets",
			"item": [
				{
					"name": "GET",
					"item": [
						{
							"name": "TC6: Validar búsqueda de mascotas disponibles por estado.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains pets with status 'available'\", function () {\r",
											"    var jsonData = pm.response.json(); // Parseamos el JSON de la respuesta\r",
											"    // Verificamos que todos los objetos de la respuesta tengan el estado 'available'\r",
											"    jsonData.forEach(pet => {\r",
											"        pm.expect(pet.status).to.eql('available');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Key",
										"value": "accept",
										"type": "text"
									},
									{
										"key": "Value",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://petstore.swagger.io/v2/pet/findByStatus?status=available",
									"protocol": "https",
									"host": [
										"petstore",
										"swagger",
										"io"
									],
									"path": [
										"v2",
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"key": "status",
											"value": "available"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TC8: Validar obtención de detalles de mascotas por ID válido.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseJson;\r",
											"\r",
											"\r",
											"pm.test(\"Se obtuvo un ID válido\", function() {\r",
											"    const petId = pm.environment.get(\"petId\");\r",
											"    console.log(\"Valor de petId: \", petId);\r",
											"    pm.expect(petId).to.not.be.undefined;\r",
											"    pm.expect(petId).to.not.be.null;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"El código de estado es 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"La respuesta es JSON válido\", function () {\r",
											"    try {\r",
											"        responseJson = pm.response.json();\r",
											"        pm.expect(responseJson).to.be.an('object');\r",
											"    } catch (e) {\r",
											"        pm.expect.fail('La respuesta no es JSON válido: ' + e.message);\r",
											"    }\r",
											"});\r",
											"\r",
											"if (responseJson) {\r",
											"    \r",
											"    pm.test(\"La respuesta tiene la estructura correcta\", function () {\r",
											"        pm.expect(responseJson).to.have.property('id');\r",
											"        pm.expect(responseJson).to.have.property('name');\r",
											"        pm.expect(responseJson).to.have.property('status');\r",
											"        pm.expect(responseJson).to.have.property('category');\r",
											"        pm.expect(responseJson).to.have.property('photoUrls').to.be.an('array');\r",
											"        pm.expect(responseJson).to.have.property('tags').to.be.an('array');\r",
											"    });\r",
											"\r",
											"    \r",
											"    pm.test(\"El ID de la mascota es correcto\", function () {\r",
											"        const expectedId = pm.environment.get(\"petId\");\r",
											"        pm.expect(responseJson.id).to.equal(Number(expectedId));\r",
											"    });\r",
											"\r",
											"    \r",
											"    pm.test(\"El status no está vacío\", function () {\r",
											"        pm.expect(responseJson.status).to.not.be.empty;\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// PRE-REQUEST SCRIPT:\r",
											"const getAvailablePetsRequest = {\r",
											"    url: 'https://petstore.swagger.io/v2/pet/findByStatus?status=available',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'accept': 'application/json'\r",
											"    }\r",
											"};\r",
											"\r",
											"\r",
											"async function setPetId() {\r",
											"    try {\r",
											"        const response = await pm.sendRequest(getAvailablePetsRequest);\r",
											"        const pets = response.json();\r",
											"        \r",
											"        if (!pets || pets.length === 0) {\r",
											"            console.error(\"No se encontraron mascotas disponibles\");\r",
											"            return;\r",
											"        }\r",
											"        \r",
											"        \r",
											"        const petId = pets[0].id;\r",
											"        pm.environment.set(\"petId\", petId);\r",
											"        console.log(\"ID de mascota guardado:\", petId);\r",
											"        \r",
											"        \r",
											"        pm.request.url.path = `/v2/pet/${petId}`;\r",
											"        \r",
											"    } catch (error) {\r",
											"        console.error(\"Error en pre-request:\", error);\r",
											"    }\r",
											"}\r",
											"\r",
											"setPetId();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://petstore.swagger.io/v2/pet/{{petId}}\n\n",
									"protocol": "https",
									"host": [
										"petstore",
										"swagger",
										"io"
									],
									"path": [
										"v2",
										"pet",
										"{{petId}}\n\n"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC9: Validar que No existe mascota con ID inválido.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains error message\", function () {\r",
											"    var contentType = pm.response.headers.get('Content-Type');\r",
											"    \r",
											"    if (contentType && contentType.indexOf('application/json') > -1) {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData).to.have.property('message');\r",
											"        pm.expect(jsonData.message).to.eql('Pet not found');\r",
											"    } else {\r",
											"        \r",
											"        pm.expect(contentType).to.eql('text/html');\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains error type\", function () {\r",
											"    var contentType = pm.response.headers.get('Content-Type');\r",
											"    \r",
											"    if (contentType && contentType.indexOf('application/json') > -1) {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData).to.have.property('type');\r",
											"        pm.expect(jsonData.type).to.eql('unknown');\r",
											"    } else {\r",
											"        \r",
											"        pm.expect(contentType).to.eql('text/html');\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/pet/{petid}\n\n\n\n\n\n\n",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"pet",
										"{petid}\n\n\n\n\n\n\n"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST",
					"item": [
						{
							"name": "TC3: Validar creación de nueva mascota con datos válidos.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", function () {\r",
											"    var statusCode = pm.response.code; \r",
											"    pm.expect([200, 201]).to.include(statusCode); \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains pet details\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.name).to.eql(\"Claud\");\r",
											"    pm.expect(jsonData.status).to.eql(\"available\");\r",
											"    pm.expect(jsonData.category.name).to.eql(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Key",
										"value": "Content-Type",
										"type": "text"
									},
									{
										"key": "Value",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 123456789,\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"Claud\",\r\n  \"photoUrls\": [\"url1\", \"url2\"],\r\n  \"tags\": [\r\n    { \"id\": 0, \"name\": \"tag1\" }\r\n  ],\r\n  \"status\": \"available\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://petstore.swagger.io/v2/pet",
									"protocol": "https",
									"host": [
										"petstore",
										"swagger",
										"io"
									],
									"path": [
										"v2",
										"pet"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "TC5: Validar actualización de datos de mascotas correctamente",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let petId = 123456789; \r",
											"pm.environment.set(\"petId\", petId);\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `https://petstore.swagger.io/v2/pet/${petId}`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'accept': 'application/json'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log('Error en la verificación de la mascota:', err);\r",
											"    } else if (res.status === 404) {\r",
											"        console.log('Mascota no encontrada, creando una nueva.');\r",
											"        pm.sendRequest({\r",
											"            url: `https://petstore.swagger.io/v2/pet`,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json'\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"id\": petId,\r",
											"                    \"category\": { \"id\": 1, \"name\": \"Dogs\" },\r",
											"                    \"name\": \"Buddy\",\r",
											"                    \"photoUrls\": [\"url1\", \"url2\"],\r",
											"                    \"tags\": [{ \"id\": 1, \"name\": \"friendly\" }],\r",
											"                    \"status\": \"available\"\r",
											"                })\r",
											"            }\r",
											"        }, function (createErr, createRes) {\r",
											"            if (createErr) {\r",
											"                console.log('Error al crear la mascota:', createErr);\r",
											"            } else {\r",
											"                console.log('Mascota creada con éxito:', createRes.status);\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains updated pet details\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    let petId = parseInt(pm.environment.get(\"petId\"));\r",
											"    \r",
											"    // Asegúrate de que el id recibido en la respuesta sea igual al que se envió\r",
											"    pm.expect(jsonData.id).to.eql(petId);\r",
											"    pm.expect(jsonData.name).to.eql(\"Buddy Updated\");\r",
											"    pm.expect(jsonData.status).to.eql(\"sold\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Key",
										"value": "Content-Type",
										"type": "text"
									},
									{
										"key": "Value",
										"value": "pplication/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 123456789,\r\n    \"category\": {\r\n        \"id\": 1,\r\n        \"name\": \"Luna\"\r\n    },\r\n    \"name\": \"Buddy Updated\",\r\n    \"photoUrls\": [\"url1\", \"url2\"],\r\n    \"tags\": [\r\n        {\r\n            \"id\": 1,\r\n            \"name\": \"friendly\"\r\n        }\r\n    ],\r\n    \"status\": \"sold\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/pet",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "TC12: Validar eliminación de mascota por ID válido.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const petId = Math.floor(Math.random() * 100000); // ID aleatorio entre 0 y 99,999\r",
											"pm.environment.set(\"petIdToDelete\", petId);\r",
											"\r",
											"const createPetRequest = {\r",
											"    url: 'https://petstore.swagger.io/v2/pet',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'accept': 'application/json',\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"id\": petId,\r",
											"            \"name\": \"TestPet_\" + Date.now(),\r",
											"            \"status\": \"available\",\r",
											"            \"photoUrls\": [\"url1\"],\r",
											"            \"category\": { \"id\": 1, \"name\": \"Dogs\" },\r",
											"            \"tags\": [{ \"id\": 1, \"name\": \"test-tag\" }]\r",
											"        })\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(createPetRequest, function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(\"Error creando la mascota:\", err);\r",
											"    } else if (response.code === 200) {\r",
											"        console.log(\"Mascota creada exitosamente:\", response.json());\r",
											"    } else {\r",
											"        console.error(\"Error inesperado al crear la mascota:\", response.json());\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Código de estado es 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta contiene el ID eliminado\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.message).to.eql(pm.environment.get(\"petIdToDelete\").toString());\r",
											"});\r",
											"\r",
											"// Verificar que la mascota fue eliminada\r",
											"const petId = pm.environment.get(\"petIdToDelete\");\r",
											"const verifyRequest = {\r",
											"    url: `https://petstore.swagger.io/v2/pet/${petId}`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'accept': 'application/json'\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(verifyRequest, function (err, response) {\r",
											"    pm.test(\"La mascota fue eliminada correctamente\", function () {\r",
											"        pm.expect(response.code).to.eql(404);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseurl}}/pet/{{petIdToDelete}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"pet",
										"{{petIdToDelete}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "PET STORE | Order Flow",
			"item": [
				{
					"name": "GET",
					"item": [
						{
							"name": "TC14: Validar obtención exitosa del inventario de productos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseJson;\r",
											"\r",
											"pm.test(\"El código de estado es 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta es JSON válido\", function () {\r",
											"    try {\r",
											"        responseJson = pm.response.json();\r",
											"    } catch (e) {\r",
											"        pm.expect.fail(\"La respuesta no es un JSON válido: \" + e.message);\r",
											"    }\r",
											"});\r",
											"\r",
											"if (responseJson) {\r",
											"    pm.test(\"El Inventario esta Disponible\", function () {\r",
											"        pm.expect(responseJson).to.have.property(\"available\").that.is.a(\"number\");\r",
											"    });\r",
											"\r",
											"  \r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// PRE-REQUEST SCRIPT:\r",
											"const getInventoryRequest = {\r",
											"    url: `${pm.environment.get(\"baseurl\")}/store/inventory`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'accept': 'application/json'\r",
											"    }\r",
											"};\r",
											"\r",
											"// Usar async/await para asegurar la obtención del inventario antes de ejecutar el test.\r",
											"async function fetchInventory() {\r",
											"    try {\r",
											"        const response = await pm.sendRequest(getInventoryRequest);\r",
											"        const inventory = response.json();\r",
											"\r",
											"        if (!inventory || Object.keys(inventory).length === 0) {\r",
											"            console.error(\"El inventario está vacío o no se pudo obtener\");\r",
											"            return;\r",
											"        }\r",
											"\r",
											"        // Guardar el inventario en una variable de entorno\r",
											"        pm.environment.set(\"currentInventory\", JSON.stringify(inventory));\r",
											"        console.log(\"Inventario guardado:\", inventory);\r",
											"\r",
											"    } catch (error) {\r",
											"        console.error(\"Error al obtener el inventario:\", error);\r",
											"    }\r",
											"}\r",
											"\r",
											"fetchInventory();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/store/inventory",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"store",
										"inventory"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC24: Validar búsqueda  de un pedido con ID Inválido",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains 404 error message\", function () {\r",
											"    const responseText = pm.response.text();  \r",
											"    pm.expect(responseText).to.include('404 Not Found');  \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://petstore.swagger.io/v2/store/order/123456\n\n\n\n\n",
									"protocol": "https",
									"host": [
										"petstore",
										"swagger",
										"io"
									],
									"path": [
										"v2",
										"store",
										"order",
										"123456\n\n\n\n\n"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST",
					"item": [
						{
							"name": "TC16: Validar creación de pedido exitoso con productos del inventario.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"El código de estado es 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"El cuerpo de la respuesta contiene los valores esperados\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    \r",
											"    pm.expect(responseBody).to.have.property('id').that.is.a('number');\r",
											"    pm.expect(responseBody).to.have.property('petId').that.is.a('number');\r",
											"    pm.expect(responseBody).to.have.property('quantity').that.is.a('number');\r",
											"    pm.expect(responseBody).to.have.property('shipDate').that.is.a('string');  \r",
											"    pm.expect(responseBody).to.have.property('status').that.is.a('string');     \r",
											"    pm.expect(responseBody).to.have.property('complete').that.is.a('boolean');  \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 0,\r\n  \"petId\": 0,\r\n  \"quantity\": 0,\r\n  \"shipDate\": \"2025-01-13T13:30:50.187Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/store/order/",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"store",
										"order",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT",
					"item": []
				},
				{
					"name": "DELETE",
					"item": []
				}
			]
		},
		{
			"name": "US-003 USER | User Management",
			"item": [
				{
					"name": "GET",
					"item": [
						{
							"name": "TC38: Validar lógin exitoso con credenciales válidas.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"claud\",\r\n  \"password\": \"123\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://petstore.swagger.io/v2/user/login",
									"protocol": "https",
									"host": [
										"petstore",
										"swagger",
										"io"
									],
									"path": [
										"v2",
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC39: Validar lógin fallido con credenciales incorrectas.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validar que el código de estado sea 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Validar que la respuesta contiene el mensaje esperado\", function () {\r",
											"    pm.response.to.have.jsonBody('message');\r",
											"    pm.expect(pm.response.json().message).to.eql('User not found');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://petstore.swagger.io/v2/user/login\n?username=login&password=Password",
									"protocol": "https",
									"host": [
										"petstore",
										"swagger",
										"io"
									],
									"path": [
										"v2",
										"user",
										"login\n"
									],
									"query": [
										{
											"key": "username",
											"value": "login"
										},
										{
											"key": "password",
											"value": "Password"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TC32: Validar busqueda de usuario exitosamente con datos válidos.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseJson;\r",
											"\r",
											"// Validar que el nombre de usuario esté definido en la variable de entorno\r",
											"pm.test(\"Se obtuvo un nombre de usuario válido\", function () {\r",
											"    const username = pm.environment.get(\"username\");\r",
											"    pm.expect(username).to.not.be.undefined;\r",
											"    pm.expect(username).to.not.be.null;\r",
											"    pm.expect(username).to.be.a('string').and.not.be.empty;\r",
											"});\r",
											"\r",
											"// Validar el código de respuesta\r",
											"pm.test(\"El código de estado es 200 o 404\", function () {\r",
											"    pm.expect([200, 404]).to.include(pm.response.code);\r",
											"});\r",
											"\r",
											"// Validar que la respuesta es JSON válido\r",
											"pm.test(\"La respuesta es JSON válido\", function () {\r",
											"    try {\r",
											"        responseJson = pm.response.json();\r",
											"        pm.expect(responseJson).to.be.an('object');\r",
											"    } catch (e) {\r",
											"        pm.expect.fail('La respuesta no es JSON válido: ' + e.message);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Validar si el usuario existe o no en la base de datos\r",
											"if (pm.response.code === 200) {\r",
											"    pm.test(\"El usuario existe en la base de datos\", function () {\r",
											"        const expectedUsername = pm.environment.get(\"username\");\r",
											"        pm.expect(responseJson).to.have.property('username');\r",
											"        pm.expect(responseJson.username).to.equal(expectedUsername);\r",
											"    });\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"const getUserRequest = {\r",
											"    url: 'https://petstore.swagger.io/v2/user/user1',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'accept': 'application/json'\r",
											"    }\r",
											"};\r",
											"\r",
											"async function setUsername() {\r",
											"    try {\r",
											"        const response = await pm.sendRequest(getUserRequest);\r",
											"        const user = response.json();\r",
											"        \r",
											"        if (!user || user.code !== 200) {\r",
											"            console.error(\"No se encontró el usuario especificado o el estado no es 200\");\r",
											"            return;\r",
											"        }\r",
											"        \r",
											"        \r",
											"        const username = user.username;\r",
											"        pm.environment.set(\"username\", username);\r",
											"        console.log(\"Nombre de usuario guardado:\", username);\r",
											"        \r",
											"        \r",
											"        pm.request.url.path = `/v2/user/${username}`;\r",
											"        \r",
											"    } catch (error) {\r",
											"        console.error(\"Error en pre-request:\", error);\r",
											"    }\r",
											"}\r",
											"\r",
											"setUsername();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://petstore.swagger.io/v2/user/{{username}}\n",
									"protocol": "https",
									"host": [
										"petstore",
										"swagger",
										"io"
									],
									"path": [
										"v2",
										"user",
										"{{username}}\n"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST",
					"item": [
						{
							"name": "TC28: Validar creación de usuario exitosamente con datos válidos.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// PRE-REQUEST SCRIPT:\r",
											"// Generar datos únicos para el usuario\r",
											"const timestamp = Date.now();\r",
											"const userData = {\r",
											"    id: timestamp,\r",
											"    username: `testUser_${timestamp}`,\r",
											"    firstName: \"Test\",\r",
											"    lastName: \"User\",\r",
											"    email: `testuser_${timestamp}@test.com`,\r",
											"    password: \"test123\",\r",
											"    phone: \"1234567890\",\r",
											"    userStatus: 1\r",
											"};\r",
											"\r",
											"// Guardar datos para validación posterior\r",
											"pm.environment.set(\"currentUsername\", userData.username);\r",
											"pm.environment.set(\"currentUserData\", JSON.stringify(userData));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"El código de estado es 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"La respuesta tiene el formato correcto\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.have.property('code', 200);\r",
											"    pm.expect(responseJson).to.have.property('type');\r",
											"    pm.expect(responseJson).to.have.property('message');\r",
											"});\r",
											"\r",
											"// Verificar que el usuario fue creado haciendo una petición GET\r",
											"const username = pm.environment.get(\"currentUsername\");\r",
											"const getUserRequest = {\r",
											"    url: `https://petstore.swagger.io/v2/user/${username}`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'accept': 'application/json'\r",
											"    }\r",
											"};\r",
											"\r",
											"// Verificar que el usuario existe y los datos son correctos\r",
											"pm.sendRequest(getUserRequest, function (err, response) {\r",
											"    if (err) {\r",
											"        console.error(err);\r",
											"    }\r",
											"    \r",
											"    const originalUserData = JSON.parse(pm.environment.get(\"currentUserData\"));\r",
											"    \r",
											"    pm.test(\"El usuario esta creado\", function () {\r",
											"        pm.expect(response).to.have.property('code', 200);\r",
											"        \r",
											"        const userJson = response.json();\r",
											"        pm.expect(userJson.username).to.eql(originalUserData.username);\r",
											"        pm.expect(userJson.email).to.eql(originalUserData.email);\r",
											"        pm.expect(userJson.firstName).to.eql(originalUserData.firstName);\r",
											"        pm.expect(userJson.lastName).to.eql(originalUserData.lastName);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {{currentUserData}}\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://petstore.swagger.io/v2/user/createWithList",
									"protocol": "https",
									"host": [
										"petstore",
										"swagger",
										"io"
									],
									"path": [
										"v2",
										"user",
										"createWithList"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "TC34: Validar actualización de datos de usuario correctamente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verificar que el código de estado sea 200 OK\r",
											"pm.test(\"Código de estado es 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Verificar que la respuesta sea un JSON válido\r",
											"pm.test(\"La respuesta es un JSON válido\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Verificar que la respuesta contiene la estructura esperada (con 'code', 'type', y 'message')\r",
											"pm.test(\"La respuesta contiene los valores esperados\", function () {\r",
											"    var jsonResponse = pm.response.json();\r",
											"    pm.expect(jsonResponse).to.have.property(\"code\");\r",
											"    pm.expect(jsonResponse).to.have.property(\"type\");\r",
											"    pm.expect(jsonResponse).to.have.property(\"message\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"claud\",\r\n  \"firstName\": \"Claud\",\r\n  \"lastName\": \"dog\",\r\n  \"email\": \"claud.doe@example.com\",\r\n  \"password\": \"newpassword123\",\r\n  \"phone\": \"1234567890\",\r\n  \"userStatus\": 1\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://petstore.swagger.io/v2/user/{{username}}",
									"protocol": "https",
									"host": [
										"petstore",
										"swagger",
										"io"
									],
									"path": [
										"v2",
										"user",
										"{{username}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "petId",
			"value": ""
		}
	]
}